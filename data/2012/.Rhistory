g = sort(g)
g = g[order(k)]
cor(k, g, method = "spearman")
plot(k, g[order(k)])
plot(k, g)
k
g
k = c(1, 2, 3, 4, 1, 1, 5, 2, 8, 1, 2, 1, 1)
g = round(rnorm(13, 0.1, 0.01), 3)
g = sort(g)
g
k = c(1, 2, 3, 4, 1, 1, 5, 2, 8, 1, 2, 1, 1)
g = round(rnorm(13, 0.1, 0.01), 3)
g = sort(g)
g
g = g[order(k)]
g
k
order(k)
order(k, decreasing = TRUE)
k = c(2, 3, 1, 4)
g = round(rnorm(4, 0.1, 0.01), 3)
k
g
g = sort(g)
g
order(k)
k[order(k)]
k = c(2, 3, 1, 4)
g = round(rnorm(4, 0.1, 0.01), 3)
k
g
g[k]
k
k = c(2, 3, 1, 4)
g = round(rnorm(4, 0.1, 0.01), 3)
g = sort(g)
k
g = round(rnorm(4, 0.1, 0.01), 3)
g = sort(g)
g
g[k]
k = c(2, 3, 1, 1, 4, 2)
g = round(rnorm(6, 0.1, 0.01), 3)
g
g = sort(g)
g
g[k]
k
rank(k)
k
rank(k)
k = c(2, 3, 1, 5, 4, 7)
k
rank(k)
rank(k, ties.method = "random")
k = c(2, 3, 1, 1, 4, 2)
rank(k, ties.method = "random")
k = c(2, 3, 1, 1, 4, 2)
k
rank(k, ties.method = "random")
k
rank(k, ties.method = "random")
k
rank(k, ties.method = "random")
k
rank(k, ties.method = "random")
k = c(2, 3, 1, 1, 4, 2)
k
g = round(rnorm(6, 0.1, 0.01), 3)
k = c(2, 3, 1, 1, 4, 2)
k = c(1, 2, 2, 3, 1, 1, 4, 2, 1, 7, 10)
length(k)
g = rnorm(11, 0.1, 0.01)
k
k = c(1, 2, 10, 7, 1, 1, 4, 2, 1, 3, 2)
g = rnorm(11, 0.1, 0.01)
g = sort(g)
g
g = g[rank(k, ties.method = "random")]
g
cor(k, g, method = "spearman")
plot(k, g)
k = c(1, 2, 10, 7, 1, 1, 4, 2, 1, 3, 2)
g = rnorm(11, 0.1, 0.01)
g = sort(g)
g = g[rank(k, ties.method = "random")]
cor(k, g, method = "spearman")
plot(k, g)
k = c(1, 2, 10, 7, 1, 1, 4, 2, 1, 3, 2)
g = rnorm(11, 0.1, 0.01)
g = sort(g)
g = g[rank(k, ties.method = "random")]
cor(k, g, method = "spearman")
plot(k, g)
k
g
x <- c(1, 5, 6, 9, 11, 15, 19, 20, 21)
y <- c(3.5, 8, 11, 16, 25, 25, 32, 32, 44)
plot(x ~ y)
mod <- lm(x ~ y)
mod
mod$coefficients
a <- mod$coefficients[1]
a
b <- mod$coefficients[1]
a <- mod$coefficients[2]
b
a
x <- c(1, 5, 6, 9, 11, 15, 19, 20, 21)
y <- c(3.5, 8, 11, 16, 25, 25, 32, 32, 44)
plot(y ~ x)
mod <- lm(y ~ x)
b <- mod$coefficients[1]
a <- mod$coefficients[2]
x <- c(1, 5, 6, 9, 11, 15, 19, 20, 21)
y <- c(3.5, 8, 11, 16, 25, 25, 32, 32, 44)
plot(y ~ x)
mod <- lm(y ~ x)
b <- mod$coefficients[1]
a <- mod$coefficients[2]
(b <- mod$coefficients[1])
(a <- mod$coefficients[2])
n <- length(x)
n
n <- length(y)
n
(mean(y) * sum(x^2)) - (mean(x) * sum(x * y)) / (sum(x^2) - n * mean(x)^2)
(mean(y) * sum(x^2))
(mean(y) * sum(x^2)) - (mean(x) * sum(x * y))
sum(x^2)
n * mean(x)^2
(sum(x^2) - n * mean(x)^2)
(mean(y) * sum(x^2)) - (mean(x) * sum(x * y)) / (sum(x^2) - n * mean(x)^2)
a <- ((mean(y) * sum(x^2)) - (mean(x) * sum(x * y))) / (sum(x^2) - n * mean(x)^2)
a
a
cov(x, y)
cov(x, y) / var(x)
(b <- mod$coefficients[1])
(a <- mod$coefficients[2])
b <- mean(y) - a * mean(x)
(b <- mod$coefficients[1])
(a <- mod$coefficients[2])
a <- cov(x, y) / var(x)
b <- mean(y) - a * mean(x)
(b <- mod$coefficients[1])
(a <- mod$coefficients[2])
(a <- mod$coefficients[2])
(b <- mod$coefficients[1])
(a <- cov(x, y) / var(x))
(b <- mean(y) - a * mean(x))
(a <- mod$coefficients[1])
(b <- mod$coefficients[2])
plot(y ~ x)
abline(a = a, b = b, col = "red")
mod <- lm(x ~ y)
(a <- mod$coefficients[1])
(b <- mod$coefficients[2])
abline(a = a, b = b, col = "blue")
(a <- mod$coefficients[1])
mod <- lm(x ~ y)
(b <- mod$coefficients[2])
1/(a <- mod$coefficients[1])
mod
(a <- mod$coefficients[1])
mod <- lm(y ~ x)
(a <- mod$coefficients[1])
(b <- mod$coefficients[2])
plot(y ~ x)
abline(a = a, b = b, col = "red")
mod <- lm(x ~ y)
(a <- mod$coefficients[1])
(b <- mod$coefficients[2])
abline(a = b/a, b = 1/a, col = "blue")
abline(a = a, b = b, col = "blue")
otu_table = read.table("otu_table.txt", header = TRUE, check.names = FALSE)
otu_table = read.table("otu_table.txt", header = TRUE, check.names = FALSE)
dist_mat = read.table("dist_mat.txt", header = TRUE, check.names = FALSE)
View(otu_table)
View(dist_mat)
View(otu_table)
otu_table[otu_table > 0]
class(otu_table[otu_table > 0])
View(otu_table)
mean_counts <- apply(otu_table[otu_table > 0], 2, sum)
sum_counts <- apply(otu_table, 2, sum)
sum_counts
richness
otu_table = read.table("otu_table.txt", header = TRUE, check.names = FALSE)
dist_mat = read.table("dist_mat.txt", header = TRUE, check.names = FALSE)
richness <- apply(otu_table > 0, 2, sum)
# Simpson diversity
comp_simpson <- function(x) 1 - sum((x ^ 2) / sum(x) ^ 2)
simpson <- apply(otu_table, 2, comp_simpson)
# Shannon diversity
comp_shannon <- function(x) {
rel_abund <- x / sum(x)
rel_abund <- rel_abund[rel_abund > 0]
H <- sum(rel_abund * log(rel_abund))
}
shannon <- apply(otu_table, 2, comp_shannon)
# species evenness
evenness <- shannon / log(richness)
library(ggplot2)
library(ggplot2)
library(GGally)
# creating data frame to generate plot
plot_df <- data.frame(metric = c(richness, simpson, shannon, evenness),
type = c(rep("richness", ncol(otu_table)),
rep("simpson", ncol(otu_table)),
rep("shannon", ncol(otu_table)),
rep("evenness", ncol(otu_table))))
plot_df <- data.frame(richness = richness,
simpson = simpson,
shannon = shannon,
evenness = evenness)
library(tidyverse)
# transforming data frame
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
abund_df <- otu_table %>% gather("sample", "abund")
# adding relative abundance
abund_df <- ddply(abund_df, "sample", transform,
rel_abund = abund / sum(abund))
abund_df <- ddply(abund_df, "sample", transform,
rank_abund = rank(-rel_abund, ties.method = "random"))
otu_table_NA <- otu_table
otu_table_NA[otu_table_NA == 0] <- NA
View(otu_table_NA)
otu_table_NA <- otu_table
otu_table_NA[otu_table_NA == 0] <- NA
mean_counts <- apply(otu_table, 2, mean, na.rm = TRUE)
var_counts <- apply(otu_table, 2, var, na.rm = TRUE)
mean_counts
var_counts
plot_df <- data.frame(mean = mean_counts,
var = var_counts)
plot_df <- data.frame(mean = mean_counts,
var = var_counts)
p=ggplot(data = plot_df, aes(x = log(mean), y = log(var))) +
geom_point(size = 1.5) +
xlab("Log(mean)") +
ylab("Log(variance)") +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size = 12),
legend.position = "none")
p
p=ggplot(data = plot_df, aes(x = mean, y = log(var))) +
xlab("Log(mean)") +
ylab("Log(variance)") +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size = 12),
legend.position = "none")
p
p=ggplot(data = plot_df, aes(x = mean, y = log(var))) +
geom_point(size = 1.5) +
xlab("Log(mean)") +
ylab("Log(variance)") +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size = 12),
legend.position = "none")
p
p=ggplot(data = plot_df, aes(x = log(mean), y = log(var))) +
geom_point(size = 1.5) +
xlab("Log(mean)") +
ylab("Log(variance)") +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size = 12),
legend.position = "none")
p
mod <- lm(log(var) ~ log(mean), data = plot_df)
mod
mod$coefficients
mod$coefficients[2]
z <- seq(0, 5, by = 0.1)
z
z <- seq(0, 5, length = 100)
z
T_z <- function(z, a, b, c, d) {
a + b * z + c * z * exp(- d * z)
}
model
model <- function(z, a, b, c, d) {
a + b * z + c * z * exp(- d * z)
}
model(z)
model(z = z, a = 2, b = 1, c = 2, d = 1)
output <- model(z = z, a = 2, b = 1, c = 2, d = 1)
plot(z, output)
install.packages("numDeriv")
z
dev_a <- rep(1, length(z))
dev_a
dev_b <- z
dev_b
dev_c <- z * exp(- d * z)
dev_c <- z * exp(- 1 * z)
dev_c
dev_d <- - (2 * z ^ 2) * exp(- 1 * z)
dev_d
length(z)
jac <- matrix(c(dev_a, dev_b, dev_c, dev_d),
nrow = length(z))
jac
plot(z, output)
jacobian(a = 2, b = 1, c = 2, d = 1, z = z)
jacobian <- function(a, b, c, d, z) {
dev_a <- rep(1, length(z))
dev_b <- z
dev_c <- z * exp(- d * z)
dev_d <- - (c * z ^ 2) * exp(- d * z)
jac <- matrix(c(dev_a, dev_b, dev_c, dev_d),
nrow = length(z))
}
model <- function(a, b, c, d, z) {
a + b * z + c * z * exp(- d * z)
}
jacobian(a = 2, b = 1, c = 2, d = 1, z = z)
jacobian <- function(a, b, c, d, z) {
dev_a <- rep(1, length(z))
dev_b <- z
dev_c <- z * exp(- d * z)
dev_d <- - (c * z ^ 2) * exp(- d * z)
jac <- matrix(c(dev_a, dev_b, dev_c, dev_d),
nrow = length(z))
return(jac)
}
model <- function(a, b, c, d, z) {
output <- a + b * z + c * z * exp(- d * z)
return(output)
}
jacobian(a = 2, b = 1, c = 2, d = 1, z = z)
# clean wd and set wd
rm(list=ls())
year <- "2012"
setwd(paste("~/Dropbox (MIT)/Projects/abiotic_biotic_effects_random_ecosystems/data/",
year, sep = ""))
# read data frame
data <- read.csv(paste(year, "_cleaned_full.csv", sep = ""), as.is = TRUE)
data[1:5, 1:15]
paste(year, "_cleaned_full.csv", sep = "")
cols_na <- apply(data, 2, function(x) all(is.na(x)))
cols_na
data <- data[ , !cols_na]
data <- na.omit(data)
# check if data frame has any NA left
sum(is.na(data))
# removing dots from plant names
data$PLANT <- gsub("..", " ", data$PLANT, fixed = TRUE)
data$PLANT <- gsub(".", " ", data$PLANT, fixed = TRUE)
# changing double spaces to single spaces
data$PLANT <- gsub("  ", " ", data$PLANT, fixed = TRUE)
# removing trailing and leading spaces
data$PLANT <- trimws(data$PLANT)
# building single networks by merging monthly data for each plot/successional stage
data$PLOT <- as.factor(data$PLOT)
data$SUCCESSION <- as.factor(data$SUCCESSION)
mat_list <- split(data, list(data$PLOT, data$SUCCESSION),
drop = TRUE)
for (i in 1:length(mat_list)) {
# extracting matrix i
mat <- mat_list[[i]]
# removing species with no name
if (length(which(mat$PLANT == "")) > 0)
mat <- mat[- which(mat$PLANT == ""), ]
if (length(which(mat$PLANT == "(en blanco)")) > 0)
mat <- mat[- which(mat$PLANT == "(en blanco)"), ]
if (length(which(mat$PLANT == "NO SAMPLING")) > 0)
mat <- mat[- which(mat$PLANT == "NO SAMPLING"), ]
# changing wrong plant species names
mat$PLANT[mat$PLANT == "Acacia macrocantha"] <- "Acacia macracantha"
mat$PLANT[mat$PLANT == "Buchonsia palmeri"] <- "Bunchosia palmeri"
mat$PLANT[mat$PLANT == "Caesapinia sp"] <- "Caesalpinia sp"
mat$PLANT[mat$PLANT == "Coccoloba liebmanni"] <- "Coccoloba liebmannii"
mat$PLANT[mat$PLANT == "Cordia sp ?"] <- "Cordia sp"
mat$PLANT[mat$PLANT == "Diospyros aequivis"] <- "Diospyros aequoris"
mat$PLANT[mat$PLANT == "Lonchocarpus sp ?"] <- "Lonchocarpus sp"
mat$PLANT[mat$PLANT == "Achatocarpus gracilis H Walt"] <- "Achatocarpus gracilis"
mat$PLANT[mat$PLANT == "Lonchocarpus (4)"] <- "Lonchocarpus sp 4"
mat$PLANT[mat$PLANT == "Hpp Hemiangium excelsum"] <- "Hemiangium excelsum"
mat$PLANT[mat$PLANT == "Hpp Hemiangium excelsium"] <- "Hemiangium excelsum"
mat$PLANT[mat$PLANT == "Serjania brachycarpa A Gray"] <- "Serjania brachycarpa"
mat$PLANT[mat$PLANT == "aff Calliandra emarginata"] <- "Calliandra emarginata"
mat$PLANT[mat$PLANT == "aff Lonchocarpus sp L"] <- "Lonchocarpus sp L"
mat$PLANT[mat$PLANT == "Celtis iguanaea (Jacq ) Sarg"] <- "Celtis iguanaea"
mat$PLANT[mat$PLANT == "Randia thurberi S Wats"] <- "Randia thurberi"
mat$PLANT[mat$PLANT == "Cordia aff gerascanthus"] <- "Cordia gerascanthus"
mat$PLANT[mat$PLANT == "Achatocarpusgracilis"] <- "Achatocarpus gracilis"
mat$PLANT[mat$PLANT == "Bourreria purpussii"] <- "Bourreria purpusii"
mat$PLANT[mat$PLANT == "Cordia aff Gerascanthus"] <- "Cordia gerascanthus"
mat$PLANT[mat$PLANT == "Cordia eleagnoides"] <- "Cordia elaeagnoides"
mat$PLANT[mat$PLANT == "Cordia sp1"] <- "Cordia sp 1"
mat$PLANT[mat$PLANT == "Dyphisa occidentalis"] <- "Diphysa occidentalis"
mat$PLANT[mat$PLANT == "Forchammeria pallida"] <- "Forchhammeria pallida"
mat$PLANT[mat$PLANT == "Forchammeria sessiliflora"] <- "Forchhammeria sessiliflora"
mat$PLANT[mat$PLANT == "Forchhammeria sesiiflora"] <- "Forchhammeria sessiliflora"
mat$PLANT[mat$PLANT == "Gettarda elliptica"] <- "Guettarda elliptica"
mat$PLANT[mat$PLANT == "Hemiangium excelsium"] <- "Hemiangium excelsum"
mat$PLANT[mat$PLANT == "Ipomea wolcottiana"] <- "Ipomoea wolcottiana"
mat$PLANT[mat$PLANT == "Malphigia emilae"] <- "Malpighia emiliae"
mat$PLANT[mat$PLANT == "Malphigia emiliae"] <- "Malpighia emiliae"
mat$PLANT[mat$PLANT == "Myrospermun frutensces"] <- "Myrospermum frutescens"
mat$PLANT[mat$PLANT == "Myrospermun frutescens"] <- "Myrospermum frutescens"
mat$PLANT[mat$PLANT == "Phyllanthus mociniatus"] <- "Phyllanthus mocinianus"
mat$PLANT[mat$PLANT == "Phyllanthus mociniaus"] <- "Phyllanthus mocinianus"
mat$PLANT[mat$PLANT == "Stemmadenia donell-smithii"] <- "Stemmadenia donnell-smithii"
mat$PLANT[mat$PLANT == "Thounia paucidentata"] <- "Thouinia paucidentata"
mat$PLANT[mat$PLANT == "Trichilia triflora"] <- "Trichilia trifolia"
mat$PLANT[mat$PLANT == "Zanthoxyllum sp 2"] <- "Zanthoxylum sp 2"
mat$PLANT[mat$PLANT == "Zanthoxyllum sp 3"] <- "Zanthoxylum sp 3"
mat$PLANT[mat$PLANT == "Zanthoxyllum caribaeum"] <- "Zanthoxylum caribaeum"
# changing wrong herbivore species names
colnames(mat)[colnames(mat) == "O114....ANTES.O460."] <- "O114"
colnames(mat)[colnames(mat) == "O460"] <- "O114"
colnames(mat)[colnames(mat) == "O16....ANTES.O478."] <- "O16"
colnames(mat)[colnames(mat) == "O478"] <- "O16"
colnames(mat)[colnames(mat) == "O20....ANTES.O189."] <- "O20"
colnames(mat)[colnames(mat) == "O189"] <- "O20"
colnames(mat)[colnames(mat) == "O216....ANTES.O58."] <- "O216"
colnames(mat)[colnames(mat) == "O58"] <- "O216"
colnames(mat)[colnames(mat) == "O23....ANTES.O161."] <- "O23"
colnames(mat)[colnames(mat) == "O161"] <- "O23"
colnames(mat)[colnames(mat) == "O26....ANTES.O608."] <- "O26"
colnames(mat)[colnames(mat) == "O608"] <- "O26"
colnames(mat)[colnames(mat) == "O29....ANTES.O6."] <- "O29"
colnames(mat)[colnames(mat) == "O6"] <- "O29"
colnames(mat)[colnames(mat) == "O32....ANTES.O498."] <- "O32"
colnames(mat)[colnames(mat) == "O498"] <- "O32"
colnames(mat)[colnames(mat) == "O326....ANTES.O284."] <- "O326"
colnames(mat)[colnames(mat) == "O284"] <- "O326"
colnames(mat)[colnames(mat) == "O440....ANTES.O565.Y.O569."] <- "O440"
colnames(mat)[colnames(mat) == "O565.Y.O569"] <- "O440"
colnames(mat)[colnames(mat) == "O46....ANTES.O481."] <- "O46"
colnames(mat)[colnames(mat) == "O481"] <- "O46"
colnames(mat)[colnames(mat) == "O75....ANTES.O131."] <- "O75"
colnames(mat)[colnames(mat) == "O131"] <- "O75"
colnames(mat)[colnames(mat) == "O79....ANTES.O356."] <- "O79"
colnames(mat)[colnames(mat) == "O356"] <- "O79"
colnames(mat)[colnames(mat) == "O9....ANTES.O2."] <- "O9"
colnames(mat)[colnames(mat) == "O2"] <- "O9"
colnames(mat)[colnames(mat) == "O99....ANTES.O363."] <- "O99"
colnames(mat)[colnames(mat) == "O363"] <- "O99"
colnames(mat)[colnames(mat) == "O525.1"] <- "O525"
colnames(mat)[colnames(mat) == "O.216"] <- "O216"
colnames(mat)[colnames(mat) == "O330."] <- "O330"
colnames(mat)[colnames(mat) == "Hylesia"] <- "O299"
colnames(mat)[colnames(mat) == "O20....O256."] <- "O20"
colnames(mat)[colnames(mat) == "O256"] <- "O20"
colnames(mat)[colnames(mat) == "O66.O337"] <- "O66"
# merging duplicates (rows containing data from the same plant species)
row_names <- as.character(unique(mat$PLANT))
col_names <- as.character(colnames(mat)[5:ncol(mat)])
row_mat <- matrix(NA, nrow = length(row_names), ncol = length(col_names))
rownames(row_mat) <- row_names
colnames(row_mat) <- col_names
for (j in 1:length(row_names)) {
row_vec <- subset(mat, PLANT == row_names[j])
if (length(dim(row_vec)) > 1) {
row_vec <- row_vec[ , 5:length(row_vec)]
row_vec_sum <- apply(row_vec, 2, sum)
row_vec_sum[row_vec_sum > 0] <- 1
} else {
row_vec <- row_vec[5:length(row_vec)]
row_vec_sum <- row_vec
}
row_mat[row_names[j], ] <- row_vec_sum
}
# merging duplicates (columns containing data from the same herbivore species)
uniq_col_names <- unique(col_names)
col_mat <- matrix(NA, nrow = length(row_names), ncol = length(uniq_col_names))
rownames(col_mat) <- row_names
colnames(col_mat) <- uniq_col_names
for (j in 1:length(uniq_col_names)) {
col_vec <- row_mat[ , which(colnames(row_mat) == uniq_col_names[j])]
if (length(dim(col_vec)) > 1) {
col_vec_sum <- apply(col_vec, 1, sum)
col_vec_sum[col_vec_sum > 0] <- 1
} else {
col_vec_sum <- col_vec
}
col_mat[ , uniq_col_names[j]] <- col_vec_sum
}
mat <- col_mat
# ordering species names
mat <- mat[order(rownames(mat)), order(colnames(mat))]
# adding results to matrix list
mat_list[[i]] <- mat
}
mat_names <- gsub(".", "_", names(mat_list), fixed = TRUE)
mat_names <- gsub("EARLY", "initial", mat_names, fixed = TRUE)
mat_names <- gsub("LATE", "middle", mat_names, fixed = TRUE)
mat_names <- gsub("FOREST", "late", mat_names, fixed = TRUE)
mat_id <- grep("INITIAL", mat_names, invert = TRUE)
for (i in 1:length(mat_id)) {
mat_name <- mat_names[mat_id[i]]
write.table(mat_list[[mat_id[i]]], file = paste(mat_name, "_", year, ".txt", sep = ""),
sep = "\t", col.names = NA)
}
